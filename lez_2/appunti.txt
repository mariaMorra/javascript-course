/*
conceptual aside 1: syntax parsers, execution contexts and lexical environments
-syntax parser= program that read code, determines what it does and checks grammar (compiler/intepretrer)
    they can do "extra stuff"
-lexical environments: exists in programming languages that are such that WHERE you write a part is important
    ->exemple: var or fun can be seen only after they have been reached and read
-exexcution contexts: wrapper to help manage the code that is running 
    base in js is: GLOBAL execution context that creates a global object and a special variable: "this" ->console wt empty js on wich "this" is written will return an object
    in a browser the object "window" is also created (and assigned to "this")
*/

/*
conceptual aside 2: name/value pairs and objects
->name value pair: name which maps to a unique value (which can be a name/value pair as well)
->an object: in JS can be defined as a collection of name/value pairs
*/

/* 
execution context is created in 2 phases:
1)creation phase: creates global object and variable "this" and outer enviroment,
    HOISTING: your code is read 1Â° time and sets up  MEMORY SPACE FOR BOTH VARIABLES AND FUNCTIONS
        ->VARIABLE EXIST BUT HAVE NO VALUE YET
        ->FUNCTIONS ARE set up completedly
2)execution phase: gives values to variables and ecc does the rest of it basically

NB do NOT BASE YOUR CODE ON HOISTING
-> MANTIENI NORMALE FORMA (PRIMA LA CREAZIONE DELLE FUNZ ECC POI L'ESECUZIONE) 
*/

/*
conceptual aside 3: undefined
all variables are initially hoisted wt value "undefined"
->special value and keyword for js for vars that are created but not given any other value
NB: NEVER ESPLICITLY SET A VAR TO UNDEFINED YOURSELF!!!
it's dangerous for debugging code -> if u see it u know u did NOT set the var

{[(nb dont use var use let? idr why tho)]}

*/
/*
second phase of execution context creation: execution phase
->globlal obj, this, outer environment created
->now it runs code line by line 
    interpeting, converting, compiling, executing it
*/

/*
Single threaded: 1 command at a time
sinchronous: 1 at a time, in order
*/

/*
invocation=calling=running a function
function invocation and execution stack
function invocation->ask to execute function by writing in code: name(pars)
(compiler interprets the code)
each call of a function adds a new execution context is created and placed on top of the stack
->the top one is the executing one
->and function execution has the same passages (create & hoist functions and vars, execute) and once done it
popped off 
*/

/*
variable environment:
where the var lives and how they relate to each other in MEMORY
each exec context has it's own var enviroment
=> if u declare it as var then it's defined inside the exec cntext

scope chain:
if a function has a ref to a var defined by the GLOBAL CONTEXT/"parent context"/OUTER LEXICAL CONTEXT (where the function was defined/written NOT where it was called) 
    -> it can see the var that the other created
if a function has a ref to a var defined by any other previous context -> it cannot!!!
why? js does not look at the single exec context that is operating
-> all contextes have a ref to it's OUTER ENVIRONMENT wich usually is the LEXICAL ENVIRONMENT
which means= where it's been defined!!! (usually in the global context, or the class context i guess, lamdbdas excluded? those probs are defined where they are also called? idk)
this act of searching for var's scope is called "scope(=where i can access var) chain(=links of references for the var)" 
(obvs we can have many "links" to traverse and we can have b created in a created in global and have b use something defined in global even if it's base is only a )
*/

/*
Scope= where a variable is available in your code AND IF IT'S TRULY THE SAME VAR OR A NEW COPY (if i call a fun 2 times and it contains var foo the 2 foo are DIFFERENT VARS)
ecmascript EX6 introduces let -> can be used for BLOCK SCOPING => the var is in memory but will not be filled until it is encountered in the code and that line is run
let is only available only in the block it's declared in, but scope chain still works (????); 
in a for var makes it so that you are always using the same variable, let instead makes a new one in memory every cycle

Asynchornous= more than one at a time BUT JS IS SYNCHRONOUS
->to handle async the JAVASCRIPT ENGINE, who works wt the browser which is doing other stuff??
in js engine there is the exec context list BUT ALSO the EVENT QUEUE
-> any event (clicks, http requests ecc) that my funs need is in the QUEUE
periodically that queue is read => if any events that my code needs are there then 
jsengine creates the context of the funs that are involved
=>the event queue will not be PROCESSED UNTIL THE EXEC STACK IS EMPTY!!!
the browser is async placing events in the queue,
jsengine executes synch all the code, when the stack is empty it looks at the even queue and acts on it


*/