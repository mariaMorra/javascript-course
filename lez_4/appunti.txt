/*
OBJECT AND FUNCTIONS
the 2 are +++ RELATED, almost the same thing
*/

/*
object and the dot "." (operator)
an obj can have properties and methods
method= function connected to an object
Obj is in memory and has references to the addresses/space in memory where it's "parts" live
to access the parts themselves
    >x proprieta: 
        -computed member access operator : [] -> to set and access properties
        -object access operator (?) : . -> to set and access any part (?) 
    >x metodi: 
        -object access operator (?) : . -> to set and access any part (?) 
(prefer the . operator unless u need dynamic strings to access the searched property)
NB if u use it to CREATE a property be carefull of nesting
1) crea l'ggetto base
2) crea proprietà base
3) crea proprietà di oggetto proprietà
esempio persona.indirizzo.strada funziona solo se persona.indirizzo è GIA' creata con {} o new Object or wtvr else engine gets confused and gives back error
*/

/*
OBJECT AND OBJECT LITERALS
an object created wt ={...} is an object literal
can be used anywhere, even as a parameter in a function call
*/

/*
framework aside : faking namespaces
namespace=container for variables and functions used to keep them separate from other wt the same name
but js does NOT have namespaces
=> objects can be used to simulate namespaces =)
*/

/*
object notation vs object literal
json HAS VERY SIMILAR SYNTAX but it expects all keys to be strings (wt "")
i can turn a normal obj lit into a valid json and all json is valid js obj:
    =>(JSON.stringify(objectLiteral)); // traduce da oggetto a string
    =>(JSON.stringify(jsonObjectLiteral)); // traduce da json a string
    =>var jsonvalue = JSON.parse('{"firstname" : "saklè","isAProgrammer" : false}'); //traduce da string a json / oggetto js
*/

/*
js concept: first class functions => FUNCTIONS ARE OBJECTS
first class functions: everything u CAN do wt other types u can do with FUNCTIONS: 
    >u can assign it to variables, 
    >pass them around as a parameter, 
    >create them on the fly ecc
a function is a special type of object, can have:
-associated primitives
-ass. objects
-ass. functions
but also:
-has name but it's optional, can be anonymous
-can have code (the code you write) => the code u write is a property of the function
it is NOT the function itself
->code is invocable, it can be run and create an exec context ecc
*/

/*
function statements and functions expressions
expressions: a unit of code that results in a value, not necessarily saved in a var;
statement: unit of code that does NOT return a value, it's just an action in the code
a function can be statements or values, 
the 2 can have the same code, but:
>the first can be called from anywhere in the parent, it is created but has no true home
>the second results in an object being created, the function itself, that can be assigned to a variable BUT CANNOT BE HOISTED!
*/

/*
"by value VS by reference"
talking about variables
    ->if i pass it by value then i get an new COPY
    ->if i pass by reference i have the address where the first variable hosts it's own value, we do NOT have a new location in memory
>if primitive type passing is done by value most usually
>if object normal passing is not by value, but by reference (shallow copy, we get two ALIASES TO THE SAME OBJECT)
*/

/*
the creation phase, happens whan a function's code is invoked
and results in the creation of an EXECUTION CONTEXT, 
in which we get a:
>variable environment
>reference to outer (lexical) environment
>variable "this" => points to diffenent object depending on HOW the function is called
    ->if it's on a browser it's gonna be the global object (window) qualora
        -io scriva console.log(this)
        -io chiami una funzione (PRIVA DI OGGETTO DI INVOCAZIONE)
        -qualora una funzione sia creata INTERNAMENTE AD UN METODO DI UN OGGETTO (inatteso!!!) [it's called an INTERNAL FUNCTION]
    ->the object (invocation object) that defines the method (if it's referring to a method instead of a function)
how to check what THIS points to? 
1) nel metodo di livello zero dell'oggetto(o forse si può fare anche nell'oggetto)
define var self=this
2) usa self in qualsiasi caso di necessità al posto di this. in modo esplicito
*/

/*
arrays= collection of objects
can be primitive, objects, functions ecc
to get to fields/methods(or functions) 
use: nomearr[index].field
     nomearr[index].methodname()/() for simple (anonymous functions)
*/
/*
arguments & spread (NEW, substitues arguments)
at creation of execution context from invocation of function
we get
(already known)
->variable environment
->this
->outer env reference
(NEW)
->"arguments"= all values u pass to function u r calling
(parameters you pass ot a function)
as we know we can call wtout passing and wtout default values (sets to undefined)
nb can see all the params of a functions in arguments (!!!)
-> console.log(arguments)
is LIKE an array  
*/
/*
function overloading
js cannot have function overloading (bc fun are OBJECTS)
but you can use a pattern LIKE
specificFun1(a, b){... generalFun(a, b, x)}
specificFun2(a1, b1){... generalFun(a, b, y)}
generalFun(a, b, c){...switch(c){case x, case y}}

*/
/*
syntax parsers
reads code to see if it's valid and sees what you are doing
*/
/*
dangerous nb:
put in the damn semicolons and be careful of whitespace (on return for exemple) 
*/
/*
iife: Immediately Invoked Function expressions
we can create functions
as statements (normal declaration)
as expressions (anonymous function literal placed in var)
i can invoke it later wt name();

OR i can write:
var varname = fun(pars){
    ...
}(vals); -> () means create and execute immediately !!! -> var contains the result

or i can do wtout the var:
(function(pars){...}(vals));

or
(function(pars){...})(vals);

or i can use lambdas
() ->{ ... }

this is useful bk each var is inside the context
of the function and NOT in the global scope
=> no possible ambiguity of WHICH variable to use
two var wt same name never meet if we use iife 
=> different contexts that are NOT global will be indipendent
*/

/*
understanding closures
a function CAN  return another function and i can call the returned function
wt fun()(); => exec the returned function

this is because of closures
the context of parent function is destroyed but the memoryspace of the RETURNED value is still filled wt the child function
=>but it uses also (possibly) pars of the parent function, how it works?
child has ref to parent context  => the scopechain still find 
we say that :  "exec context is CLOSED IN his outher variables" even when the context is gone
=>it's a feature of the js programming lenguage, we dont have to worry abouth outer variables ecc, they are going to be there

NB it can have "unexpected" consequences if u r not careful
if a outer var changes val in time => they will find the LAST value it got
(uses value last in memory obvs) MOST SEEN WT FOR LOOPS

"free variable" = any variable outside a function to wich i have access to (exemple: outer variables)

CALLBACKS AND CLOSURES
events, settimers, calbacks USE CLOSURES!!!
callback function= function given to another fun to be run once the other function is finished
-> the fun u call calls back by calling the fun u give it when it finishes
*/

/*
FUNCTION FACTORIES
>pattern otherwise impossible
>powerful and flexible pattern
=> i can create a core of functions wt similar objectivesbut easy to call
*/

/*
call(), apply() and bind()
they are used to control what "this" contains
all functions have:
-name (optional)
-code invocable
-properties and methods can be added
-the functions  
    >call(obj, par)= esegue funzione usando obj come this e par come parametri della funzione
    >apply(obj, [par]) = as cll bure REQUIRES an array for pars
    >bind(obj)=crea copia di funzione, a cui assegna obj come valore di "this" per funzione fun: fun.bind(obj)
WHEN are theese used?
->function borrowing to apply a method on an object differetthan the one that defined the method
    ("best practice" new obj should have same properties (wt same properties names) as the original obj)
->function currying to add constraint to base function on pars
*/
